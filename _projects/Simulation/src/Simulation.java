import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;

import static java.lang.Thread.sleep;

public class Simulation {

    public static final List<int[]> DIRECTIONS;

    static {

        // –°–¥–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–º –∏ –ø—Ä–∏—Å–≤–æ–∏–º –µ–≥–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–µ
        DIRECTIONS = List.of(new int[]{1, 0}, new int[]{-1, 0}, new int[]{0, 1}, new int[]{0, -1});
    }

    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É
    static Map map;


    // –ê) –°–¥–µ–ª–∞—Ç—å —à–∞–≥
    public static void makeStep() {
        // –¶–∏–∫–ª –ø–æ —Å—É—â–µ—Å—Ç–≤–∞–º
        System.out.println(Map.mapObjects);
        Collection<Entity> values = Map.mapObjects.values();
        for (Entity entity :values) {

            Creature creature = null;
            if (entity instanceof Creature) {
                creature = (Creature) entity;
                creature.makeMove(map);
            }
        }
    }

    // –ë) –°–¥–µ–ª–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    public static void makeAction() {
        for (Entity entity : Map.mapObjects.values()) {
            Creature creature = null;
            if (entity instanceof Creature) {
                creature = (Creature) entity;
            }


            // 1. –¢—Ä–∞–≤–æ—è–¥–Ω–æ–µ –µ—Å—Ç —Ç—Ä–∞–≤—É
            if (creature instanceof Herbivore) {
                creature.doAction(map);

            }
            // 2. –•–∏—â–Ω–∏–∫ –∞—Ç–∞–∫—É–µ—Ç —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ
            else if (creature instanceof Predator) {
                creature.doAction(map);
            }


        }
    }

    public static void initActions(int countHerbivore, int countPredator, int countGrass, int countRock,
                                   int countTree) {
        map = new Map(countHerbivore, countPredator, countGrass, countRock, countTree);
    }



    // –ø—Ä–æ—Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –æ–¥–∏–Ω —Ö–æ–¥
    public static void nextTurn() {
        Renderer.renderMap(map);
        makeStep();
        makeAction();
    }


    public static void printGame() {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n");
        System.out.println("1 - –°–¥–µ–ª–∞—Ç—å 1 —à–∞–≥ –°–∏–º—É–ª—è—Ü–∏–∏");
        System.out.println("2 - –ù–∞—á–∞—Ç—å –°–∏–º—É–ª—è—Ü–∏—é");
        System.out.println("0 - –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã");
    }

    public static void main(String[] args) throws InterruptedException {

        int countHerbivore = 5;
        int countPredator = 3;
        int countGrass = 5;
        int countRock = 4;
        int countTree = 3;

        printGame();

        initActions(countHerbivore, countPredator, countGrass, countRock, countTree);



        Scanner scanner = new Scanner(System.in);
        AtomicBoolean isRunning = new AtomicBoolean(true);

        while (isRunning.get()) {


            if (scanner.hasNextLine()) {


                // –ß—Ç–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                int choice = 0;
                if (scanner.hasNextInt()) {
                    choice = scanner.nextInt();
                } else {
                    System.out.println("Invalid input. Please enter a number between 1 and 4.");
                    scanner.next(); // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å –ø–æ–º–æ—â—å—é switch
                switch (choice) {
                    case 1:
                        nextTurn();
                        break;

                    case 2:
                        int countHerbivoreSimulation = countHerbivore;
                        while (countHerbivoreSimulation > 0) {
                            nextTurn();
                            sleep(1000);
                            countHerbivoreSimulation = 0;
                            for (Entity entity : Map.mapObjects.values()) {
                                // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ entity —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Herbivore
                                if (entity instanceof Herbivore) {
                                    countHerbivoreSimulation += 1;
                                }
                            }
                        }


                    case 0:
                        System.out.println("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã! –ü–æ–∫–∞ üëã");
                        isRunning.set(false); // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
                        break;

                    default:
                        System.out.println("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 2");
                        break;
                }
            }
        }
        scanner.close(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    }
}